// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lengthenWT
arma::vec lengthenWT(const arma::vec& w_t_original, const int& n, const bool& modifyW_T);
RcppExport SEXP _LogiSieve_lengthenWT(SEXP w_t_originalSEXP, SEXP nSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w_t_original(w_t_originalSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(lengthenWT(w_t_original, n, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// calculateMu
arma::vec calculateMu(const arma::mat& design_mat, const arma::mat& prev);
RcppExport SEXP _LogiSieve_calculateMu(SEXP design_matSEXP, SEXP prevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev(prevSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMu(design_mat, prev));
    return rcpp_result_gen;
END_RCPP
}
// calculateGradient
arma::vec calculateGradient(arma::vec& w_t, const int& n, const arma::mat& design_mat, const arma::vec& Y_col, const arma::vec& muVector, const bool& modifyW_T);
RcppExport SEXP _LogiSieve_calculateGradient(SEXP w_tSEXP, SEXP nSEXP, SEXP design_matSEXP, SEXP Y_colSEXP, SEXP muVectorSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type w_t(w_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_col(Y_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type muVector(muVectorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateGradient(w_t, n, design_mat, Y_col, muVector, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// calculateHessian
arma::mat calculateHessian(const arma::mat& design_mat, arma::vec& w_t, const arma::vec& muVector, const int& n, arma::vec& mus, const bool& modifyW_T);
RcppExport SEXP _LogiSieve_calculateHessian(SEXP design_matSEXP, SEXP w_tSEXP, SEXP muVectorSEXP, SEXP nSEXP, SEXP musSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w_t(w_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type muVector(muVectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateHessian(design_mat, w_t, muVector, n, mus, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// pYstarCalc
arma::vec pYstarCalc(const arma::mat& gamma_design_mat, const int& startRow, const arma::mat& prev_gamma, const arma::mat& comp_dat_all, const int& Y_unval_index);
RcppExport SEXP _LogiSieve_pYstarCalc(SEXP gamma_design_matSEXP, SEXP startRowSEXP, SEXP prev_gammaSEXP, SEXP comp_dat_allSEXP, SEXP Y_unval_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_design_mat(gamma_design_matSEXP);
    Rcpp::traits::input_parameter< const int& >::type startRow(startRowSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_gamma(prev_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type comp_dat_all(comp_dat_allSEXP);
    Rcpp::traits::input_parameter< const int& >::type Y_unval_index(Y_unval_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(pYstarCalc(gamma_design_mat, startRow, prev_gamma, comp_dat_all, Y_unval_index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogiSieve_lengthenWT", (DL_FUNC) &_LogiSieve_lengthenWT, 3},
    {"_LogiSieve_calculateMu", (DL_FUNC) &_LogiSieve_calculateMu, 2},
    {"_LogiSieve_calculateGradient", (DL_FUNC) &_LogiSieve_calculateGradient, 6},
    {"_LogiSieve_calculateHessian", (DL_FUNC) &_LogiSieve_calculateHessian, 6},
    {"_LogiSieve_pYstarCalc", (DL_FUNC) &_LogiSieve_pYstarCalc, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogiSieve(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
